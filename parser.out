Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> NAME EQUALS term
Rule 2     term -> factor PLUS factor
Rule 3     factor -> LPAREN term RPAREN
Rule 4     term -> factor
Rule 5     factor -> NUMBER
Rule 6     factor -> NAME

Terminals, with rules where they appear

EQUALS               : 1
LPAREN               : 3
NAME                 : 1 6
NUMBER               : 5
PLUS                 : 2
RPAREN               : 3
error                : 

Nonterminals, with rules where they appear

expression           : 0
factor               : 2 2 4
term                 : 1 3

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . NAME EQUALS term

    NAME            shift and go to state 2

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .



state 2

    (1) expression -> NAME . EQUALS term

    EQUALS          shift and go to state 3


state 3

    (1) expression -> NAME EQUALS . term
    (2) term -> . factor PLUS factor
    (4) term -> . factor
    (3) factor -> . LPAREN term RPAREN
    (5) factor -> . NUMBER
    (6) factor -> . NAME

    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    NAME            shift and go to state 4

    term                           shift and go to state 5
    factor                         shift and go to state 6

state 4

    (6) factor -> NAME .

    PLUS            reduce using rule 6 (factor -> NAME .)
    $end            reduce using rule 6 (factor -> NAME .)
    RPAREN          reduce using rule 6 (factor -> NAME .)


state 5

    (1) expression -> NAME EQUALS term .

    $end            reduce using rule 1 (expression -> NAME EQUALS term .)


state 6

    (2) term -> factor . PLUS factor
    (4) term -> factor .

    PLUS            shift and go to state 9
    $end            reduce using rule 4 (term -> factor .)
    RPAREN          reduce using rule 4 (term -> factor .)


state 7

    (3) factor -> LPAREN . term RPAREN
    (2) term -> . factor PLUS factor
    (4) term -> . factor
    (3) factor -> . LPAREN term RPAREN
    (5) factor -> . NUMBER
    (6) factor -> . NAME

    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    NAME            shift and go to state 4

    term                           shift and go to state 10
    factor                         shift and go to state 6

state 8

    (5) factor -> NUMBER .

    PLUS            reduce using rule 5 (factor -> NUMBER .)
    $end            reduce using rule 5 (factor -> NUMBER .)
    RPAREN          reduce using rule 5 (factor -> NUMBER .)


state 9

    (2) term -> factor PLUS . factor
    (3) factor -> . LPAREN term RPAREN
    (5) factor -> . NUMBER
    (6) factor -> . NAME

    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    NAME            shift and go to state 4

    factor                         shift and go to state 11

state 10

    (3) factor -> LPAREN term . RPAREN

    RPAREN          shift and go to state 12


state 11

    (2) term -> factor PLUS factor .

    $end            reduce using rule 2 (term -> factor PLUS factor .)
    RPAREN          reduce using rule 2 (term -> factor PLUS factor .)


state 12

    (3) factor -> LPAREN term RPAREN .

    PLUS            reduce using rule 3 (factor -> LPAREN term RPAREN .)
    $end            reduce using rule 3 (factor -> LPAREN term RPAREN .)
    RPAREN          reduce using rule 3 (factor -> LPAREN term RPAREN .)


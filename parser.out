Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression PLUS term
Rule 2     expression -> term
Rule 3     term -> factor
Rule 4     factor -> LPAREN expression RPAREN
Rule 5     expression -> NAME EQUALS expression
Rule 6     factor -> NUMBER
Rule 7     factor -> NAME

Terminals, with rules where they appear

EQUALS               : 5
LPAREN               : 4
NAME                 : 5 7
NUMBER               : 6
PLUS                 : 1
RPAREN               : 4
error                : 

Nonterminals, with rules where they appear

expression           : 1 4 5 0
factor               : 3
term                 : 1 2

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression PLUS term
    (2) expression -> . term
    (5) expression -> . NAME EQUALS expression
    (3) term -> . factor
    (4) factor -> . LPAREN expression RPAREN
    (6) factor -> . NUMBER
    (7) factor -> . NAME

    NAME            shift and go to state 3
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6

    expression                     shift and go to state 1
    term                           shift and go to state 2
    factor                         shift and go to state 4

state 1

    (0) S' -> expression .
    (1) expression -> expression . PLUS term

    PLUS            shift and go to state 7


state 2

    (2) expression -> term .

    PLUS            reduce using rule 2 (expression -> term .)
    $end            reduce using rule 2 (expression -> term .)
    RPAREN          reduce using rule 2 (expression -> term .)


state 3

    (5) expression -> NAME . EQUALS expression
    (7) factor -> NAME .

    EQUALS          shift and go to state 8
    PLUS            reduce using rule 7 (factor -> NAME .)
    $end            reduce using rule 7 (factor -> NAME .)
    RPAREN          reduce using rule 7 (factor -> NAME .)


state 4

    (3) term -> factor .

    PLUS            reduce using rule 3 (term -> factor .)
    $end            reduce using rule 3 (term -> factor .)
    RPAREN          reduce using rule 3 (term -> factor .)


state 5

    (4) factor -> LPAREN . expression RPAREN
    (1) expression -> . expression PLUS term
    (2) expression -> . term
    (5) expression -> . NAME EQUALS expression
    (3) term -> . factor
    (4) factor -> . LPAREN expression RPAREN
    (6) factor -> . NUMBER
    (7) factor -> . NAME

    NAME            shift and go to state 3
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6

    expression                     shift and go to state 9
    term                           shift and go to state 2
    factor                         shift and go to state 4

state 6

    (6) factor -> NUMBER .

    PLUS            reduce using rule 6 (factor -> NUMBER .)
    $end            reduce using rule 6 (factor -> NUMBER .)
    RPAREN          reduce using rule 6 (factor -> NUMBER .)


state 7

    (1) expression -> expression PLUS . term
    (3) term -> . factor
    (4) factor -> . LPAREN expression RPAREN
    (6) factor -> . NUMBER
    (7) factor -> . NAME

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    NAME            shift and go to state 11

    term                           shift and go to state 10
    factor                         shift and go to state 4

state 8

    (5) expression -> NAME EQUALS . expression
    (1) expression -> . expression PLUS term
    (2) expression -> . term
    (5) expression -> . NAME EQUALS expression
    (3) term -> . factor
    (4) factor -> . LPAREN expression RPAREN
    (6) factor -> . NUMBER
    (7) factor -> . NAME

    NAME            shift and go to state 3
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6

    expression                     shift and go to state 12
    term                           shift and go to state 2
    factor                         shift and go to state 4

state 9

    (4) factor -> LPAREN expression . RPAREN
    (1) expression -> expression . PLUS term

    RPAREN          shift and go to state 13
    PLUS            shift and go to state 7


state 10

    (1) expression -> expression PLUS term .

    PLUS            reduce using rule 1 (expression -> expression PLUS term .)
    $end            reduce using rule 1 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 1 (expression -> expression PLUS term .)


state 11

    (7) factor -> NAME .

    PLUS            reduce using rule 7 (factor -> NAME .)
    $end            reduce using rule 7 (factor -> NAME .)
    RPAREN          reduce using rule 7 (factor -> NAME .)


state 12

    (5) expression -> NAME EQUALS expression .
    (1) expression -> expression . PLUS term

  ! shift/reduce conflict for PLUS resolved as shift
    $end            reduce using rule 5 (expression -> NAME EQUALS expression .)
    RPAREN          reduce using rule 5 (expression -> NAME EQUALS expression .)
    PLUS            shift and go to state 7

  ! PLUS            [ reduce using rule 5 (expression -> NAME EQUALS expression .) ]


state 13

    (4) factor -> LPAREN expression RPAREN .

    PLUS            reduce using rule 4 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 4 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 4 (factor -> LPAREN expression RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 12 resolved as shift
